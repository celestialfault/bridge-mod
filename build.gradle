plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id "org.jetbrains.kotlin.jvm" version "1.9.23"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
	maven { url = 'https://maven.odinair.xyz/snapshots' }
	maven { url = 'https://maven.isxander.dev/releases'}
	maven { url = 'https://maven.terraformersmc.com/' }
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation fabricApi.module("fabric-command-api-v2", project.fabric_version)
	// note that we only depend on networking-api for ClientPlayConnectionEvents to know when the player
	// has joined/disconnected from a server
	modImplementation fabricApi.module("fabric-networking-api-v1", project.fabric_version)
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:1.2.0"
	modRuntimeOnly "maven.modrinth:no-telemetry:1.8.0"

	include(implementation("org.java-websocket:Java-WebSocket:1.5.6"))
	include(implementation("me.celestialfault:celestial-config:1.0-alpha.2"))

	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}") {
		exclude(group: "com.twelvemonkeys.common")
		exclude(group: "com.twelvemonkeys.imageio")
		because("yacl 3.2.1 requires dependencies gradle can't resolve without extra repositories - https://github.com/isXander/YetAnotherConfigLib/issues/111")
	}
}

loom {
	runs {
		remove server
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}
